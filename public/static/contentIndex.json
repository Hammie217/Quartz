{"Notes/Digital/Application-Programming-Interface":{"title":"Application Programming Interface","links":[],"tags":[],"content":"An Application Programming Interface or API is an interface layer presented by a system to allow other systems to communicate easily.\nAn API allows systems to be integrated easily through a standard interface whilst allowing the API host to maintain ownership under the hood of how requests are processed.\nFor example, a historian may have a complex data storage and retrieval process to ensure compression/error detection/protection/load balancing etc that an interfacing system will not be expected to or trusted to manage through a direct connection, instead an API can be presented for consumers to use that has the protections required built in."},"Notes/Digital/CICD":{"title":"CICD","links":[],"tags":[],"content":"Continuous Integration and Continuous Deployment is the process of automating the compilation, testing and deployment of code into a production system."},"Notes/Digital/Containerisation/Autoscaling":{"title":"Autoscaling","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Pods","Notes/Digital/Containerisation/Nodes","Notes/Digital/Containerisation/kube-controller-manager","Notes/Digital/Containerisation/Control-Plane","Notes/Digital/Containerisation/Horizontal-Pod-Autoscaling","Notes/Digital/Containerisation/Veritcal-Pod-Autoscaling","Notes/Digital/Application-Programming-Interface"],"tags":[],"content":"Autoscaling is a process in Kubernetes that allows Pods and Nodes to be automatically scaled to manage changing demand. Pods autoscaling is managed in the kube-controller-manager where resources are monitored on loop to detect if thresholds are met and need scaling.\nNodes Autoscaling is managed in another component called “Cluster Autoscaling”.\nAutoscaling is managed in the Control Plane\nThere are two different methods of Pods autoscaling:\n\nHorizontal Pod Autoscaling - Spin up and down pods on demand\nVeritcal Pod Autoscaling - Scale you pod resources based on demand\n\nAll autoscaling requests occur through the typical Kubernetes Control Plane Application Programming Interface."},"Notes/Digital/Containerisation/Container-Image":{"title":"Container Image","links":["Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/Image-Repository","Notes/Digital/Containerisation/Container-Runtime","Notes/Digital/Containerisation/Docker"],"tags":[],"content":"Container images are Container templates stored in an Image Repository that can be used to spin up Containers in a Container Runtime such as Docker."},"Notes/Digital/Containerisation/Container-Runtime":{"title":"Container Runtime","links":["Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/Container-Image"],"tags":[],"content":"A container runtime is a piece of software that allows for the creation and running of Container based on Container Image."},"Notes/Digital/Containerisation/Container":{"title":"Container","links":["Notes/Digital/Containerisation/Container-Image","Notes/Digital/Containerisation/Docker"],"tags":[],"content":"Containers are units of software that run to do a specific function, containers are based on Container Images that define what the container is comprised of.\nFor example a Container Image for InfluxDB is released and I can consume that image at my house as a container running on my home Docker host to instantly have a running InfluxDB."},"Notes/Digital/Containerisation/Control-Plane":{"title":"Control Plane","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/kube-apiserver","Notes/Digital/Containerisation/kube-controller-manager","Notes/Digital/Containerisation/kube-scheduler","Notes/Digital/Containerisation/etcd"],"tags":[],"content":"The control plane is the core component of Kubernetes that manages a cluster.\nBy default it is made up of:\n\nkube-apiserver\nkube-controller-manager\nkube-scheduler\netcd\n"},"Notes/Digital/Containerisation/Docker":{"title":"Docker","links":["Notes/Digital/Containerisation/Container-Runtime"],"tags":[],"content":"Docker is a very commonly used Container Runtime."},"Notes/Digital/Containerisation/Ephemeral":{"title":"Ephemeral","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/Persistent-Volume-Claim","Notes/Digital/Containerisation/Pods"],"tags":[],"content":"In Kubernetes the concept of an ephemeral Container is one that can run temporarily, aka it can spin up and spin down as required without needing any container specific memory.\nEphemeral containers can still use Persistent Volume Claim but shared across Pods rather than specific to the individual Pods.\nEphemeral containers are the opposite of stateful containers where history of the container is required for proper operation."},"Notes/Digital/Containerisation/High-Availability":{"title":"High Availability","links":[],"tags":[],"content":"High availability (HA) is simply the characteristic of keeping a system in an up state as much as possible, usually to some defined service level agreement such as 99.99% uptime (Less than 1 hour down a year).\nTo meet this HA requirement systems must:\n\nBe Fault tolerant - Capable of failing without loss of service\nHave Redundancy - Have hot swap at all times in event of failure\nLoad balance - Spread access loads out to prevent overuse of a single point\n"},"Notes/Digital/Containerisation/Horizontal-Pod-Autoscaling":{"title":"Horizontal Pod Autoscaling","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Autoscaling"],"tags":[],"content":"HPA is the process of spinning up new pods as required to meet demand in Kubernetes for Autoscaling."},"Notes/Digital/Containerisation/Image-Repository":{"title":"Image Repository","links":["Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/Container-Runtime","Notes/Digital/Containerisation/Docker","Open-Container-Initiative"],"tags":[],"content":"An image repository is used to store Container templates that can be spun up in a Container Runtime such as Docker.\nImage repositories are Container Runtime specific but many are adopting the Open Container Initiative format popularised by Docker to allow use on any platform."},"Notes/Digital/Containerisation/Kubernetes-services":{"title":"Kubernetes services","links":["Notes/Digital/Containerisation/Pods","Notes/Digital/Containerisation/Proxy"],"tags":[],"content":"Kubernetes services (or just called services in the kubernetes world) are an abstraction to allow exposing static endpoints for consumption whilst Pods in kubernetes are constantly changing.\nFor example a pod might be hosting a database at 1.2.3.4:1000 today and at 4.3.2.1:1000 tomorrow, services allow you to specify an endpoint myservice:80 that the kubernetes Proxy can then re-direct to the appropriate Pods."},"Notes/Digital/Containerisation/Kubernetes":{"title":"Kubernetes","links":["Notes/Digital/Containerisation/Container"],"tags":[],"content":"Kubernetes is a container orchestration platform for managing Containerised platforms."},"Notes/Digital/Containerisation/Microservices":{"title":"Microservices","links":[],"tags":[],"content":""},"Notes/Digital/Containerisation/Nodes":{"title":"Nodes","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Pods","Posts/Kubernetes-Case-Study","Notes/Digital/Containerisation/High-Availability","Notes/Digital/Containerisation/Container-Runtime","Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/kubelet","Notes/Digital/Containerisation/Proxy","Notes/Digital/Containerisation/kube-proxy"],"tags":[],"content":"Nodes are a key concept of Kubernetes, these are your worker servers (more commonly VM’s such as EC2 instances) used in your cluster and as such spin up and down much less than Pods.\nIn one Kubernetes Case Study cluster you should have multiple nodes to allow for High Availability. Larger nodes allow for less overheads and are more cost effective per compute used but more smaller nodes allow for more dynamic scalability to spin up and down as demand rises and falls.\nNodes (sometimes called Worker Nodes) are made of four main components :\n\nContainer Runtime\nContainers\nNode Agent (kubelet)\nProxy (Not always required) (kube-proxy)\n"},"Notes/Digital/Containerisation/Persistent-Volume-Claim":{"title":"Persistent Volume Claim","links":[],"tags":[],"content":""},"Notes/Digital/Containerisation/Pods":{"title":"Pods","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/Autoscaling"],"tags":[],"content":"Nodes are a key concept of Kubernetes, these are a collection of Containers that form a functional block. Pods can be scaled up and down based on load using Autoscaling"},"Notes/Digital/Containerisation/Proxy":{"title":"Proxy","links":["Notes/Digital/Containerisation/Proxy","Notes/Digital/Containerisation/Kubernetes-services","Notes/Digital/Containerisation/Pods"],"tags":[],"content":"A Proxy is installed on nodes to allow Kubernetes services to be implemented. This allows for exposing network points to Pods that require it.\nIf this is not a requirement a proxy does not need to be installed.\nAs Pods are spun up and down as required with differing IP’s a proxy allows a specific Kubernetes services address to be used and the proxy can re-direct this traffic depending on what Pods are currently up.\nThe default kubernetes proxy is kube-proxy"},"Notes/Digital/Containerisation/Stateful-Set":{"title":"Stateful Set","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Pods","Notes/Digital/Containerisation/Persistent-Volume-Claim"],"tags":[],"content":"A stateful set in Kubernetes ensures that when pods are spun up/down they are unique by applying an identifier to their names. Each time one of these Pods is created it links to its identifier and can be linked to a Persistent Volume Claim where its data resides whether the pod is running or not."},"Notes/Digital/Containerisation/Veritcal-Pod-Autoscaling":{"title":"Veritcal Pod Autoscaling","links":["Notes/Digital/Containerisation/Pods","Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Autoscaling"],"tags":[],"content":"VPA is the process of updating resources aligned to Pods automatically based on load in Kubernetes for Autoscaling."},"Notes/Digital/Containerisation/etcd":{"title":"etcd","links":["Notes/Digital/Containerisation/High-Availability","Notes/Digital/Containerisation/Kubernetes"],"tags":[],"content":"etcd is a High Availability key-value store used by Kubernetes for storing information and configuration."},"Notes/Digital/Containerisation/kube-apiserver":{"title":"kube-apiserver","links":["Notes/Digital/Application-Programming-Interface","Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Control-Plane"],"tags":[],"content":"Kube-apiserver is the default Application Programming Interface used in the Kubernetes Control Plane to manage all interactions."},"Notes/Digital/Containerisation/kube-controller-manager":{"title":"kube-controller-manager","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Control-Plane","Notes/Digital/Containerisation/Nodes","Notes/Digital/Application-Programming-Interface"],"tags":[],"content":"Kube Controller Manager is the default controller management component of the Kubernetes Control Plane that monitors the status of Nodes through the Application Programming Interface, detecting node failures and spinning up new nodes as required."},"Notes/Digital/Containerisation/kube-proxy":{"title":"kube-proxy","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Proxy"],"tags":[],"content":"kube-proxy is the default Kubernetes Proxy ."},"Notes/Digital/Containerisation/kube-scheduler":{"title":"kube-scheduler","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Control-Plane","Notes/Digital/Containerisation/Pods"],"tags":[],"content":"Kube Scheduler is the default scheduler component of Kubernetes Control Plane that monitors load on the Pods and selects which node they should run on."},"Notes/Digital/Containerisation/kubeadm":{"title":"kubeadm","links":["Notes/Digital/Containerisation/Kubernetes"],"tags":[],"content":"kubeadm is Kubernetes tool for quickly setting up kubernetes clusters."},"Notes/Digital/Containerisation/kubelet":{"title":"kubelet","links":["Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Nodes","Notes/Digital/Containerisation/Control-Plane"],"tags":[],"content":"Kubelet is the default Kubernetes Node agent that sits on all worker Nodes supervising all activity on the node and feeding status information back to the Control Plane."},"Notes/Notes":{"title":"Notes","links":["Notes/Pharma/","Notes/Pharma/Secondary-Manufacturing"],"tags":[],"content":"Hello everyone, this section of my website is dedicated to my “Second Brain” style website that can hopefully be used as a lookup for all to use and learn as much as you like about any topics I know about.\nAt the moment I’m focusing on my experience in the Pharmaceutical Industry. If you’d like to start reading it might be good to start at Secondary Manufacturing but the benefit of this approach is you can start or end anywhere."},"Notes/Pharma/Active-Pharmaceutical-Ingredient":{"title":"Active Pharmaceutical Ingredient","links":["Notes/Pharma/Primary-Manufacturing","Notes/Pharma/Secondary-Manufacturing"],"tags":[],"content":"Active Pharmaceutical Ingredient, commonly known as API is the key part of a drug, this is made during the Primary Manufacturing process and used as part of the Secondary Manufacturing process."},"Notes/Pharma/Assembly":{"title":"Assembly","links":["Notes/Pharma/Autoinjectors","Force-Distance"],"tags":[],"content":"Assembly is the process of assembling a device, for injectable devices this this is commonly Autoinjectors. Assembly can be a very complex process due to many complex parts that can have no visual indication of correct installation.\nFor example for many devices require monitoring of Force-Distance to check correct assembly which can be vary depending on the device tolerances."},"Notes/Pharma/Autoinjectors":{"title":"Autoinjectors","links":["Notes/Pharma/Vials","Notes/Pharma/Secondary-Manufacturing","Notes/Pharma/Assembly","Notes/Pharma/Syringes","Housing","Notes/Pharma/Power-Pack"],"tags":[],"content":"An autoinjector is a type of single use device used to deliver drugs to a patient. These devices are designed to be simple so that complex medicines that previously would require a healthcare professional to administer, such as Vials products, can be self administered saving time of both the healthcare team and patient.\nAutoinjectors however require the added Secondary Manufacturing complexities of Assembly.\nAutoinjectors are made up of:\n\nSyringes\nHousing\nPower Pack\n"},"Notes/Pharma/Beads":{"title":"Beads","links":["Notes/Pharma/Wet-Bead-Mill","Notes/Pharma/Milling"],"tags":[],"content":"Beads are small balls used in Wet Bead Mill to erode the product. These are commonly made using ceramic material due to their hardness.\nBead sizing determines the effective Milling particulate size."},"Notes/Pharma/Blending":{"title":"Blending","links":["Notes/Pharma/Oral-Solid-Dose","Notes/Pharma/Manufacturing"],"tags":[],"content":"Blending (or Mixing) is a process in Oral Solid Dose Manufacturing to mix multiple ingredients into one homogeneous substance."},"Notes/Pharma/Blowdown":{"title":"Blowdown","links":["Notes/Pharma/Clean-In-Place","Notes/Pharma/Sterilisation-In-Place"],"tags":[],"content":"Blowdown refers to the process of using a compressed gas to push liquid out of a system, this is commonly done after Clean In Place and Sterilisation In Place processes to remove moisture."},"Notes/Pharma/Body":{"title":"Body","links":["Notes/Pharma/Syringes","Notes/Pharma/Bulk-Drug-Product","Stopper","Notes/Pharma/Needle"],"tags":[],"content":"The body of Syringes, commonly know as the Barrel, is the glass section of a syringe that contains the liquid Bulk Drug Product and Stopper and also mounts into the Needle directly."},"Notes/Pharma/Buffer":{"title":"Buffer","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Bulk-Drug-Product"],"tags":[],"content":"Buffer is typically the non Active Pharmaceutical Ingredient components of Bulk Drug Product, these ingredients don’t have a biological impact but are instead used to support the API such as for Stability, Solubility and Efficacy."},"Notes/Pharma/Bulk-Drug-Product":{"title":"Bulk Drug Product","links":["Filling","Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Buffer","Notes/Pharma/Bulk-Drug-Substance"],"tags":[],"content":"Bulk Drug Product or commonly BDS is the name for product that is fully made ready for Filling. This is made up of the Active Pharmaceutical Ingredient and any Buffer required for the product. This name is typically used in conjunction with Bulk Drug Substance to define the product before and after manufacturing."},"Notes/Pharma/Bulk-Drug-Substance":{"title":"Bulk Drug Substance","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Bulk-Drug-Substance"],"tags":[],"content":"BDS or Bulk Drug Substance is typically another name for Active Pharmaceutical Ingredient, it is the drug product before it has been made up into Bulk Drug Substance."},"Notes/Pharma/Clean-In-Place":{"title":"Clean In Place","links":["Notes/Pharma/Water-For-Injection","Notes/Pharma/Purified-Water","Notes/Pharma/drainable","Notes/Pharma/Sterilisation-In-Place"],"tags":[],"content":"Clean in place(More commonly CIP) is the process of cleaning a system whilst it is in place (aka not disassembled).\nCIP is usually achieved through circulation/draining of hot (~80C) water (Water For Injection/Purified Water depending on requirements) for a certain time.\nCIP requires all pipework to be drainable and for all surfaces to be cleaned.\nCIP is commonly followed by Sterilisation In Place."},"Notes/Pharma/Coater":{"title":"Coater","links":["Notes/Pharma/Friability"],"tags":[],"content":"A coater typically works like a washing machine where tablets are circulated around in a drum whilst sprayed with a coating liquid and warm air to dry the coating on.\nCoaters need to balance spinning slow enough to avoid tablets chipping due to their Friability and spinning fast enough to prevent tablets sticking together.\n"},"Notes/Pharma/Coating":{"title":"Coating","links":["Notes/Pharma/Oral-Solid-Dose","Unit","Notes/Pharma/Coater"],"tags":[],"content":"Coating is a process in Oral Solid Dose manufacturing that adds a layer to the outside of a drug.\nCoating is completed using a Unit called a Coater"},"Notes/Pharma/Cold-chain":{"title":"Cold chain","links":["Critical-Process-Parameter","RFID","RTLS"],"tags":[],"content":"Cold chain products are products where temperature plays a role in the stability of the product. As such the duration the products are out of a cold storage must be tracked as a Critical Process Parameter. This is commonly implemented as a manual check but in more digital factories entry and exit events are tracked through RFID or RTLS systems."},"Notes/Pharma/Depyrogenation-Oven":{"title":"Depyrogenation Oven","links":["Notes/Pharma/Sterilisation","Notes/Pharma/Dry-Heat","Notes/Pharma/pyrogens"],"tags":[],"content":"A depyrogenation oven is a piece of equipment used for Sterilisation which uses Dry Heat. A depyrogenation oven not only kills bacteria but also destroys pyrogens. A depyrogenation oven typically has a few operations:\n\n?Venting? - Start heating with vents open to remove moisture\nHeating - Continue heating with vents closed to reach depyrogenation temperature\nDelay - Hold chamber at depyrogenation temperature until whole load is at depyrogenation temperature\nDepyrogenation - Hold depyrogenation temperature until whole load has experienced depyrogenation duration\nCooling - Cool load down to prevent injury once the door is opened\n"},"Notes/Pharma/Depyrogenation":{"title":"Depyrogenation","links":["Notes/Pharma/pyrogens","Notes/Pharma/parental","Notes/Pharma/Dry-Heat","Notes/Pharma/Sterilisation","Notes/Pharma/Depyrogenation-Oven","Notes/Pharma/pyrogen-free","Notes/Pharma/intrathecal"],"tags":[],"content":"Depyrogenation is the process of removing or destroying pyrogens, typically required for parental dose forms.\nDepyrogenation is commonly completed through Dry Heat Sterilisation such as a Depyrogenation Oven.\nThe FDA has defined limits for pyrogen free product (currently 5EU/Kg for non-intrathecal parental drugs)."},"Notes/Pharma/Dispensing":{"title":"Dispensing","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Buffer","Notes/Pharma/Beads"],"tags":[],"content":"Dispensing is the process of measuring key quantities of materials for production of the product, commonly Active Pharmaceutical Ingredient, Buffer, Beads etc…"},"Notes/Pharma/Dry-Granulation":{"title":"Dry Granulation","links":["Notes/Pharma/Granulation"],"tags":[],"content":"Dry granulation is a Granulation process where powder is kept dry during its granulation, this is usually completed using a roller compactor to squeeze the powder together followed by a simple mill and sieve to ensure particulate sizing."},"Notes/Pharma/Dry-Heat":{"title":"Dry Heat","links":["Notes/Pharma/Sterilisation","Notes/Pharma/Depyrogenation"],"tags":[],"content":"Dry heat Sterilisation is the process of heating a system without the use of water like a typical home oven, this is commonly used for both Sterilisation and Depyrogenation in one."},"Notes/Pharma/Endotoxins":{"title":"Endotoxins","links":["Gram-Negative-Bacteria","Notes/Pharma/pyrogens","Notes/Pharma/Sterilisation"],"tags":[],"content":"Endotoxins are sections of outer wall of Gram-Negative Bacteria which are pyrogens. Endotoxins are typically generated as part of Sterilisation where bacteria is broken down leaving the cell wall endotoxins behind."},"Notes/Pharma/F0-Value":{"title":"F0 Value","links":["Notes/Pharma/lethality"],"tags":[],"content":"F0 Value is a calculation of the lethality a system has been subjected to.\nF0 takes into account temperature and time of exposure."},"Notes/Pharma/Fluidised-Bed":{"title":"Fluidised Bed","links":["Notes/Pharma/Oral-Solid-Dose","Notes/Pharma/Manufacturing","Notes/Pharma/Pharmaceutical-Manufacture","Notes/Pharma/Water-For-Injection","Notes/Pharma/Clean-In-Place","Notes/Pharma/Beads","Notes/Pharma/Sterilisation"],"tags":[],"content":"A Fluidised bed is a piece of equipment that makes use of fluidisation to perform some process on particulates. Most commonly a fluid bed dryer which is used in Oral Solid Dose Manufacturing to dry wet granules.\nFluidised bed technology can also be used in Pharmaceutical Manufacture using Water For Injection as a fluidisation medium to act as a Clean In Place process for Beads, the same fluidisation process can be used with dry heat to dry the medium before Sterilisation.\n"},"Notes/Pharma/Forced-Thaw":{"title":"Forced Thaw","links":["Notes/Pharma/Thawing","Notes/Pharma/Active-Pharmaceutical-Ingredient"],"tags":[],"content":"Forced thawing is a controlled process for melting/Thawing Active Pharmaceutical Ingredient, typically a bag of product is lightly clamped between two metal plates, these metal plates are lightly heated usually through a liquid acting as a heat exchanger for the product. This allows more control and reproducibility over the thawing of a product."},"Notes/Pharma/Formulation":{"title":"Formulation","links":["Notes/Pharma/Buffer","Notes/Pharma/Manufacturing"],"tags":[],"content":"Formulation is the process in which Buffer is added during Manufacturing, this is usually done to ensure the product meets its requirements such as pH for stability."},"Notes/Pharma/Friability":{"title":"Friability","links":["Notes/Pharma/Oral-Solid-Dose","Notes/Pharma/Coating"],"tags":[],"content":"Friability is the tedancy of a substance to break into smaller pieces. Friability is a key property of Oral Solid Dose drugs especially when going through a Coating process to prevent formed drugs breaking off pieces (typically small chips)"},"Notes/Pharma/Frozen-chicken":{"title":"Frozen chicken","links":["Notes/Pharma/Thawing","Notes/Pharma/Passive-Thaw","Notes/Pharma/Forced-Thaw"],"tags":[],"content":"To describe Thawing I commonly explain this like how someone may thaw a piece of chicken for dinner. If you have enough time you could leave the chicken out on a counter, this is like Passive Thaw otherwise if you were in a pinch and needed it soon you may choose to put it in a bath of warm water or on a metal plate to dissipate the heat quicker, this is similar to Forced Thaw."},"Notes/Pharma/Granulation":{"title":"Granulation","links":["Notes/Pharma/Wet-Granulation","Notes/Pharma/Dry-Granulation","Notes/Pharma/Tablet-Pressing","Notes/Pharma/Blending","Notes/Pharma/Fluidised-Bed"],"tags":[],"content":"Granulation is the process of transforming a powder into small granules (larger particulate size). This can be completed using a small amount of liquid called Wet Granulation or through compression called Dry Granulation or sometimes not completed and the powder be directly taken to Tablet Pressing.\nGranulation is usually preceded by Blending\nWet Granulation is usually followed by a Fluidised Bed drying process before Blending\nDry Granulation is usually followed directly by Blending"},"Notes/Pharma/Labeller":{"title":"Labeller","links":["Notes/Pharma/Vials","Notes/Pharma/Syringes","Notes/Pharma/Autoinjectors","Carton","Notes/Pharma/Tamper-Evident-Label","Notes/Pharma/Serialisation"],"tags":[],"content":"A  labeller is a piece of equipment used to apply a label to something.\nThere are many subtypes of labellers that all do the same task they just operate in different ways:\n\nVial Labeller - Apply a label to a Vials\nSyringe Labeller - Apply a label to Syringes\nDevice Labeller - Apply a label to Autoinjectors\nCarton Labeller - Apply a label to a Carton\nTamper Evident Labeller - Apply a Tamper Evident Label to a Carton\n\nSerialisation is a key requirement for pharmaceutical products that must be applied at labelling.\nExpiration date and/or lot or batch numbers are also required to be labelled on the product."},"Notes/Pharma/Manufacturing":{"title":"Manufacturing","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Unit-Procedure","Notes/Pharma/Dispensing","Notes/Pharma/Thawing","Notes/Pharma/Pooling","Notes/Pharma/Blending","Notes/Pharma/Formulation","Notes/Pharma/Milling","Notes/Pharma/Granulation","Micronising","Notes/Pharma/Fluidised-Bed"],"tags":[],"content":"Manufacturing pharmaceutical products can change massively depending on the material properties of the Active Pharmaceutical Ingredient, some common manufacturing processes/Unit Procedures include:\n\nDispensing\nThawing\nPooling\nBlending\nFormulation\nMilling\nGranulation\nMicronising\nFluidised Bed Drying\n"},"Notes/Pharma/Milling":{"title":"Milling","links":["Notes/Pharma/Wet-Bead-Mill"],"tags":[],"content":"Milling is a process for reducing the particle size of products, milling can either be wet or dry. For wet milling the most common method is Wet Bead Milling.\n?Dry milling?"},"Notes/Pharma/Moist-heat-sterilisation":{"title":"Moist heat sterilisation","links":["Dry-steam","Notes/Pharma/Sterilisation","Steam-Traps","Notes/Pharma/Depyrogenation"],"tags":[],"content":"Moist heat sterilisation (Or steam sterilisation), is the process of using Dry steam in Sterilisation.\nThe condensation of steam into water releases a large amount of energy at the contact point (usually walls of a pipe) causing Sterilisation . This water vapour then acts as a barrier to further condensation on the system surfaces, as such Steam Traps are used to drain water but leave steam in the system.\nAlthough moist heat sterilisation does help with Depyrogenation, due to the presence of moisture it does not excel and is not commonly classed as a Depyrogenation process."},"Notes/Pharma/Monograph":{"title":"Monograph","links":["Notes/Pharma/Water-For-Injection","Notes/Pharma/Purified-Water"],"tags":[],"content":"A monograph in a pharmaceutical setting is a document that set the requirements/expectations for certain key components such as Water For Injection and Purified Water.\nMonographs ensure everyone is speaking the same language and there is no ambiguity around suitability as long as monograph requirements are met."},"Notes/Pharma/Needle":{"title":"Needle","links":["Notes/Pharma/Syringes","Notes/Pharma/Body","Needle-Shield"],"tags":[],"content":"The needle of Syringes, is a hollow metal tube connected to the Body that is used to inject into the body. Before use a needle will have some level of Needle Shield to protect the needle from both sterility issues and physical damage."},"Notes/Pharma/Optical-Character-Verification":{"title":"Optical Character Verification","links":["Notes/Pharma/Serialisation"],"tags":[],"content":"Optical Character Verification is a process where printed text and codes are read by a vision system and compared to what is expected.\nOCV is most commonly implemented as part of Serialisation.\nOCV is distinctly different from OCR for Example; if a label stated 006 instead of 008 this would be rejected despite being legiable as it states the wrong code."},"Notes/Pharma/Oral-Solid-Dose":{"title":"Oral Solid Dose","links":["Notes/Pharma/Granulation","Notes/Pharma/Fluidised-Bed","Notes/Pharma/Blending","Compression","Notes/Pharma/Coating","Blister-Packing"],"tags":[],"content":"Oral Solid Dose is the process of creating tablets. OSD is created using either a wet or dry process that follow a fairly similar process, typically  Granulation, Fluidised Bed drying(If wet), Blending, Compression, Coating,Blister Packing"},"Notes/Pharma/Packing":{"title":"Packing","links":["Carton","Leaflet","Case","Pallet","Notes/Pharma/Tray-Unloader","Notes/Pharma/Puck-Loader","Notes/Pharma/Labeller","Puck-Unloader","Heat-Sealer","Cartonner","Checkweigher","Bander","Casepacker","Palletiser"],"tags":[],"content":"Packing is the process of taking a finished product and packing it into the format required for shipping to a customer/distributor.\nPacking usually takes individual products and packs them into a Carton with a Leaflet inside and then into Case and onto a Pallet ready for shipping.\nCommon pieces of equipment in the pharmaceutical world are:\nTray Unloader/Puck Loader\nLabeller\nPuck Unloader\nHeat Sealer\nCartonner\nCheckweigher\nBander\nCasepacker/Palletiser"},"Notes/Pharma/Passive-Thaw":{"title":"Passive Thaw","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient"],"tags":[],"content":"Passive thawing is the process of leaving Active Pharmaceutical Ingredient in an ambient area to let it slowly thaw, as this is’t forced or controlled outside of the ambient areas controls this can take a good amount of time depending on the thermal mass and surface area, it also leads to variance in terms of time to thaw so checks have to be in place to ensure product is appropriately thawed."},"Notes/Pharma/Pharmaceutical-Manufacture":{"title":"Pharmaceutical Manufacture","links":["Notes/Pharma/Primary-Manufacturing","Notes/Pharma/Secondary-Manufacturing"],"tags":[],"content":"Pharma manufacturing chain is usually split into to distinct sections. Primary Manufacturing and Secondary Manufacturing."},"Notes/Pharma/Pooling":{"title":"Pooling","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Bulk-Drug-Product"],"tags":[],"content":"Pooling is the process of mixing multiple batches/bags of Active Pharmaceutical Ingredient together to create one batch of Bulk Drug Product"},"Notes/Pharma/Power-Pack":{"title":"Power Pack","links":["Notes/Pharma/Autoinjectors"],"tags":[],"content":"A power pack is a term used to describe the force acting part of Autoinjectors these powerpacks are the active part that allows the medicine to be delieved, as such the reliability of these devices must be high and ensure the drug is delivered in the right way."},"Notes/Pharma/Primary-Manufacturing":{"title":"Primary Manufacturing","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Secondary-Manufacturing"],"tags":[],"content":"Primary manufacturing in the pharma industry is the process of making the Active Pharmaceutical Ingredient, this API is then supplied to the Secondary Manufacturing process for finishing.\nNeed to talk here about primary processes"},"Notes/Pharma/Puck-Loader":{"title":"Puck Loader","links":["Notes/Pharma/Puck"],"tags":[],"content":"A puck loader is a piece of equipment that loads parts into a Puck."},"Notes/Pharma/Puck":{"title":"Puck","links":["Conveyor-Belt","Notes/Pharma/Packing","Notes/Pharma/Autoinjectors","Notes/Pharma/Labeller","Notes/Pharma/Puck-Loader"],"tags":[],"content":"A puck is an object used to hold a part so that it can be carried on a Conveyor Belt, pucks are used to hold complex parts in a simple way to allow a process to occur.\nFor example pucks are used in the Packing of Autoinjectors to hold the autoinjector whilst it passes through a Labeller.\nPucks are loaded with a device using a Puck Loader."},"Notes/Pharma/Purified-Water":{"title":"Purified Water","links":["Deionisation","Distilation","Ultraviolet-sterilisation","Notes/Pharma/parental","assay","Notes/Pharma/Monograph"],"tags":[],"content":"Purified Water is water that is purified to meet strict chemical and biological requirements.\nPurified water must be treated from compliant drinking water usually through processes such as Deionisation,Distilation,Ultraviolet sterilisation.\nPurifed water is commonly used in non-parental drug manufacture and testing/assay.\nIt is a registered Monograph, most prominently in the [[United States Pharmacopeia."},"Notes/Pharma/Secondary-Manufacturing":{"title":"Secondary Manufacturing","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Bulk-Drug-Substance","Notes/Pharma/Vials","Notes/Pharma/Syringes","Dermatalogicals","Inhalations","Notes/Pharma/Manufacturing","Notes/Pharma/Bulk-Drug-Product","Filling","Lyophilization","Notes/Pharma/Assembly","Inspection","Notes/Pharma/Packing","Notes/Pharma/Oral-Solid-Dose","Notes/Pharma/Tablet-Pressing","Notes/Pharma/Coating"],"tags":[],"content":"Secondary manufacturing, sometimes called Fill &amp; Finish in steriles, is the process of taking raw Active Pharmaceutical Ingredient or Bulk Drug Substance and transforming this into its final form ready for sale.\nFor liquid products (Vials, Syringes, Dermatalogicals and Inhalations) this is typically: Manufacturing a Bulk Drug Product,  Filling the product into its dose form such as Vials or Syringes, Lyophilization if required, Assembly if required, then Inspection and Packing the product.\nFor Oral Solid Dose products this is typically: Manufacturing, Tablet Pressing, Coating, Packing."},"Notes/Pharma/Serialisation":{"title":"Serialisation","links":["Notes/Pharma/Labeller","Notes/Pharma/Optical-Character-Verification"],"tags":[],"content":"Serialisation is the process of assigning a unique serial number to every product supplied.\nEach product has its serial number applied by a Labeller and verified through Optical Character Verification. After supply the serialised code is verified against a live database before dispensing to ensure a genuine product.\nSerialisation is a key requirement of regulators across the world for sale of any drug."},"Notes/Pharma/Sterilisation-In-Place":{"title":"Sterilisation In Place","links":["Notes/Pharma/Sterilisation","Notes/Pharma/Moist-heat-sterilisation","Steam-Traps","Notes/Pharma/drainable","Notes/Pharma/lethality","Notes/Pharma/worst-case"],"tags":[],"content":"Sterilisation in place (most commonly called SIP) is the process of automated Sterilisation whilst a system is in place.\nSIP almost always functions through Moist heat sterilisation, as such it is key to ensure Steam Traps are in place at all drainable points.\nSIP requires a certain temperature to be reached throughout the system for a certain time to reach a lethality, to ensure the whole system is up to temperature a worst case reading is taken."},"Notes/Pharma/Sterilisation":{"title":"Sterilisation","links":["Notes/Pharma/pyrogen-free","Autoclave","Notes/Pharma/Sterilisation-In-Place"],"tags":[],"content":"Sterilisation is the process of removing viable microorganisms, it s key to note sterilisation does not intrinsically mean pyrogen free.\nSterilisation is commonly completed through an Autoclave or Sterilisation In Place."},"Notes/Pharma/Syringes":{"title":"Syringes","links":["Notes/Pharma/Vials","Notes/Pharma/Autoinjectors","aseptic","Notes/Pharma/Terminal-Sterilisation","Stopper","Notes/Pharma/Body","Notes/Pharma/Needle","Needle-Shield"],"tags":[],"content":"Syringes are a dose form similar to Vials but with the needle attached directly for ease of use. Syringes are also commonly used in Autoinjectors. Syringes are almost always Sterile either directly filled under aseptic conditions or sterilised after filling throughTerminal Sterilisation.\nA syringe is typically made up of\n\nStopper\nBody\nNeedle\nNeedle Shield\n"},"Notes/Pharma/Tablet-Pressing":{"title":"Tablet Pressing","links":[],"tags":[],"content":""},"Notes/Pharma/Tamper-Evident-Label":{"title":"Tamper Evident Label","links":[],"tags":[],"content":"A Tamper Evident Label(TEL) is a label designed to break in a way that allows someone to check if a product has been opened previously.\nTamper Evident Labels are a control to ensure a genuine product supplied cannot be modified before given to a patient. Pharmacists are required to verify TEL status before sale of products ensuring a genuine product is supplied."},"Notes/Pharma/Terminal-Sterilisation":{"title":"Terminal Sterilisation","links":[],"tags":[],"content":""},"Notes/Pharma/Thawing":{"title":"Thawing","links":["Notes/Pharma/Active-Pharmaceutical-Ingredient","Notes/Pharma/Manufacturing","Notes/Pharma/Cold-chain","Notes/Pharma/Frozen-chicken","Notes/Pharma/Forced-Thaw","Notes/Pharma/Passive-Thaw"],"tags":[],"content":"Product thawing is the process of un-freezing Active Pharmaceutical Ingredient ready for Manufacturing and is usually one of the first steps in the manufacturing process. Products that require thawing are usually Cold chain products. I usually use a Frozen chicken simile to describe the process. There are two main ways to that a product, Forced Thaw and Passive Thaw. Products that are thawed typically have a minimum thaw time before being allowed to be used."},"Notes/Pharma/Tray-Unloader":{"title":"Tray Unloader","links":["Notes/Pharma/Assembly","Notes/Pharma/Packing","Notes/Pharma/Autoinjectors","Notes/Pharma/Puck-Loader","Notes/Pharma/Puck","Conveyor-Belt","Robotic-Arm"],"tags":[],"content":"A tray unloader is a piece of equipment used to unload parts from a tray. These are very commonly used in the Assembly and Packing of Autoinjectors due to the nature of discrete parts.\nIn Packing a Tray Unloader is commonly paired with a Puck Loader to move Autoinjectors out of a tray and into a Puck on a Conveyor Belt for further processing.\nTray unloaders commonly use a Robotic Arm to pick and place parts."},"Notes/Pharma/Vials":{"title":"Vials","links":["aseptic","Notes/Pharma/Terminal-Sterilisation","Lyophilization","Vial","Stopper","Cap"],"tags":[],"content":"Vials are a dose form commonly used for supply to healthcare professionals for delivery to the patient, vials are almost always Sterile either directly filled under aseptic conditions or sterilised after filling throughTerminal Sterilisation. Vials are also sometimes taken through a  Lyophilization process for drug stability before being made up at point of use especially for biologics or drugs that are unstable in liquid form.\nVials are typically made up of 3 main parts:\n\nVial\nStopper\nCap\n"},"Notes/Pharma/Water-For-Injection":{"title":"Water For Injection","links":["Notes/Pharma/Purified-Water","Notes/Pharma/pyrogen-free","aseptic","Notes/Pharma/Clean-In-Place","Product-Contact","Notes/Pharma/Monograph"],"tags":[],"content":"Water for Injection (WFI) is water that meets the requirements for Purified Water as well as being pyrogen free. Water For Injection must be used for aseptic products and Clean In Place for Product Contact parts.\nIt is a registered Monograph, most prominently in the [[United States Pharmacopeia."},"Notes/Pharma/Wet-Bead-Mill":{"title":"Wet Bead Mill","links":["Notes/Pharma/Beads","Notes/Pharma/particle-size","Notes/Pharma/Fluidised-Bed","Notes/Pharma/Depyrogenation-Oven","Unit-Procedure"],"tags":[],"content":"Wet bead mills use small Beads/balls to mill product down, the size of these beads determines the efficient particle size that the bead mill can create. In a sterile environment the sterility of these beads can be just as complex as the milling itself, requiring a method to clean and sterilise. Commonly using a Fluidised Bed, or other washer, and Depyrogenation Oven to achieve this.\nA wet bead mill, mills product by agitating the product with hard Beads effectively smashing the product down splitting it into smaller and smaller particles. A bead mill usually recirculates product around a larger tank to increase the amount of product milled in one Unit Procedure."},"Notes/Pharma/Wet-Granulation":{"title":"Wet Granulation","links":["Notes/Pharma/Granulation","Notes/Pharma/Fluidised-Bed"],"tags":[],"content":"Wet granulation is the process of Granulation where powders are sprayed with liquid to form granules.\nThis process is usually followed by a drying process using a Fluidised Bed."},"Notes/Pharma/drainable":{"title":"drainable","links":["Notes/Pharma/Blowdown"],"tags":[],"content":"Drainability refers to the ability of a system to drain its contents, this is most commonly completed by:\n\nAngling pipework into low points where drains can be installed so all liquid drains\nBlowdown of pipework to push liquid out of the system\n"},"Notes/Pharma/intrathecal":{"title":"intrathecal","links":["aseptic","Notes/Pharma/Depyrogenation"],"tags":[],"content":"Intrathecal is a delivery method of a drug straight into the spinal canal. As such aseptic and Depyrogenation is of increased importance."},"Notes/Pharma/lethality":{"title":"lethality","links":["Notes/Pharma/F0-Value"],"tags":[],"content":"Lethality is the statistical likelihood of killing bacteria, is is commonly measured using F0 Value."},"Notes/Pharma/parental":{"title":"parental","links":["Notes/Pharma/Vials","Notes/Pharma/Syringes"],"tags":[],"content":"Parental drug delivery is the process of delivering a drug through other means than the typical digestive tract. Aka Vials, Syringes that are injected into the bloodstream."},"Notes/Pharma/particle-size":{"title":"particle size","links":["Notes/Pharma/Milling","Notes/Pharma/Granulation","Critical-Process-Parameter"],"tags":[],"content":"Particles size can be reduced through Milling and increased through Granulation to meet the product requirements.\nParticle size is usually a Critical Process Parameter and as such must be tested, particle size analysers are commonly placed inline in a process where possible allowing high levels of control and monitoring. For small particulate sizes though this can be complex and expensive and as such an offline test is still commonly used."},"Notes/Pharma/pyrogen-free":{"title":"pyrogen free","links":["Notes/Pharma/pyrogens","Notes/Pharma/Sterilisation","Notes/Pharma/parental"],"tags":[],"content":"A product being pyrogen free is to contain no pyrogens, this is a common requirement beyond Sterilisation in parental drugs.\nAlso referred to a non-Pyrogenic."},"Notes/Pharma/pyrogens":{"title":"pyrogens","links":["Notes/Pharma/Endotoxins"],"tags":[],"content":"Pyrogens are fever causing substances, in most cases in pharmaceuticals these are Endotoxins."},"Notes/Pharma/worst-case":{"title":"worst case","links":["cold-store","Notes/Pharma/Sterilisation-In-Place"],"tags":[],"content":"A worst case point is the point in a system that is in the worst possible circumstance, for example in a cold store the point in the room that is the hottest or in Sterilisation In Place the point that is the coldest."},"Posts/F1-Strategy-Analytics":{"title":"F1 Strategy Analytics","links":["tags/F1"],"tags":["F1"],"content":"F1\nHaving recently stumbled across the Open F1 API I’ve been intrigued as to what could be done with the data, given my background in data analytics I was keen to take a look into what’s available and could be done with it.\nOn top of this, I recently applied and interviewed for a role at Aston Martin F1 where there was a programming interview that piqued my interest (Annoyingly I didn’t practice my python skills before hand and spent the whole interview trying to remember syntax rather than focus on the problem). The interview question was around tyre strategy and trying to figure out when would be the best time to swap tyres given a starting pace and linear degredation of each tyre type. Although I got the Pseudocode working trying to get arrays/dictionarys/lists working together without the internet proved to be too much for the 20 minute timer.\nSo, like any sane person, I slept on it and continued to obsess leading me to do this in my spare time.\nThe first question I wanted to answer was, for a one stop race, how can I visualise the options and strategic impact of each of these, turns out the answer is fairly simple. For any race we have a loop of laps where we constantly are adding time every lap based on our tyre performance as below:\ndef findLapTime(tyreNum, tyreNum2,lapLength,tyreChange):\n\traceTime = 0\n\ttyreAge = 0;\n\ttry:\n\t\tfor lapNum in range(0, lapLength):\n\t\t  if(lapNum==tyreChange):\n\t\t\traceTime = raceTime + pitStopDuration + TyreLaptimes[tyreNum2][0]\n\t\t\ttyreAge = 0\n\t\t  elif(lapNum&gt;tyreChange):\n\t\t\traceTime = raceTime  + TyreLaptimes[tyreNum2][tyreAge]\n\t\t  else:\n\t\t\traceTime = raceTime  + TyreLaptimes[tyreNum][tyreAge]\n\t\t  tyreAge = tyreAge + 1\n\t  except:\n\t    return np.nan\n\t  return raceTime\nBeyond that, we have a choice, at what lap do we pit, in this case we are brute forcing and will just try them all to see how long each race takes, and also the choice of tyres, inital tyres and final tyres:\nlapLength = 25\npitStopDuration = 21\ntyreTimes = np.zeros((len(TyreLaptimes),len(TyreLaptimes),lapLength))\n \nfor tyreNum in range(0, len(TyreLaptimes)):\n  for tyreNum2 in range(0, len(TyreLaptimes)):\n    for lapNum in range(0, lapLength):\n      tyreTimes[tyreNum][tyreNum2][lapNum] = findLapTime(tyreNum,tyreNum2,lapLength,lapNum)\n \nAnd that’s it, we have an array of our tyre options and pit time options. Of course this is limited by the data you have access to (We’ll discuss later but I only used 16 lap data for each tyre ), a quick plot and we get this:!\nI’ve hidden the plots where the same tyres are used but you could easily add checking into the algorithm so that isn’t an option. In this case we can see the best strategy is to use tyres 0 and 2 (Soft and hard) and pit at either lap 9 or 16 depending on if you’re on softs or hards first.\nBeyond this I then ask the question, what about a two stop race, we will then effectively have a 3d surface of each tyre option of when to pit. A little modification to our code to add two pits and another set of tyres to use we get:\ndef findLapTime2Pit(tyreNum, tyreNum2,tyreNum3,lapLength,tyreChange,tyreChange2):\n  if(tyreChange2&lt;=tyreChange):\n    return np.nan\n \n  raceTime = 0\n  tyreAge = 0;\n  try:\n    for lapNum in range(0, lapLength):\n      if(lapNum==tyreChange):\n        raceTime = raceTime + pitStopDuration + TyreLaptimes[tyreNum2][0]\n        tyreAge = 0\n      elif(lapNum==tyreChange2):\n        raceTime = raceTime  + pitStopDuration + TyreLaptimes[tyreNum3][0]\n        tyreAge = 0\n      elif(lapNum&gt;tyreChange2):\n        raceTime = raceTime  + TyreLaptimes[tyreNum3][tyreAge]\n      elif(lapNum&gt;tyreChange):\n        raceTime = raceTime  + TyreLaptimes[tyreNum2][tyreAge]\n      else:\n        raceTime = raceTime  + TyreLaptimes[tyreNum][tyreAge]\n      tyreAge = tyreAge + 1\n  except:\n    return np.nan\n  return raceTime\n \nfor tyreNum in range(0, len(TyreLaptimes)):\n  for tyreNum2 in range(0, len(TyreLaptimes)):\n    for tyreNum3 in range(0, len(TyreLaptimes)):\n      for lapNum in range(0, lapLength):\n        for lapNum2 in range(0, lapLength):\n          tyreTimes2Stop[tyreNum][tyreNum2][tyreNum3][lapNum][lapNum2] = findLapTime2Pit(tyreNum,tyreNum2,tyreNum3,lapLength,lapNum,lapNum2)\nAnd again after a quick plot in Plotly we get 3D charts of all laps, it’s incredibly difficult to see with each overlayed so here’s an example of one 3 tyre strategy (Hard-Soft-Inters):\nI appreciate it’s still quite hard to see what’s going on here but in the 3D interactive window provided by plotly it’s much easier to understand (Speaking of which feel free to view my live code here: Colab). If you think of it in terms of the previous 2D sketch we have a bunch of arches as you can see at the bottom left, all stacked up into a 3D surface. In this instance the best strategy is the bottom right datapoint with a pit at 16 and 24.\nWhen originally writing this code I created some fake datapoints just like in the interview going from fast lap times to slower lap times. In reality this isn’t the case, some tyres need a lap or two to get nice and hot for grip and then degrade over time at differing non-linear rates. My plan was to use the F1 API data to gather these tyre details and calculate their degradation over time, see below a chart of medium tyre lap times for Silverstone this year. \nAlthough this has allowed me to gather some real data that the above graphs are based on I ran into a few issues that can definitely be fixed with enough time but not a job for today such as:\n\nDoesn’t take into consideration track status ( yellow flag,etc…)\nDoesn’t take into consideration analogue track variables (Rain, dryness, temp, rubber on track)\nA lot of cars in the race are bumper to bumper, not limited by tyres but by the car in front, in this case lots of people are giving the same stint times.\nOne race is not a lot of data, on issue can throw all the readings out\nStruggle to compare tyre data between races as the tracks all have different times, realistically need to do this in some ratio rather than time to allow more data and better comparisons.\nMany many more\n\nIf you’re interested here’s my code (This was a draft so I know full well it’s not well done and definitely a lot of stuff that can even be taken out)\ndef get_laps_data(session_key, driver_number):\n  try:\n    url = f&quot;api.openf1.org/v1/laps{session_key}&quot;\n    response = requests.get(url)\n    response.raise_for_status()  # Raise an exception for bad status codes\n    data = response.json()\n    if isinstance(data, list):\n      return data\n    elif isinstance(data, dict) and &quot;MRData&quot; in data and &quot;RaceTable&quot; in data[&quot;MRData&quot;] and &quot;Races&quot; in data[&quot;MRData&quot;][&quot;RaceTable&quot;]:\n      return data[&quot;MRData&quot;][&quot;RaceTable&quot;][&quot;Races&quot;][0][&quot;Laps&quot;]\n    else:\n      print(&quot;Unexpected JSON format&quot;)\n      return None\n  except requests.exceptions.RequestException as e:\n    print(f&quot;An error occurred: {e}&quot;)\n    return None\n  except (KeyError, IndexError, TypeError):\n    print(&quot;Error processing JSON response&quot;)\n    return None\n \n \ndef get_stints_data(session_key, driver_number):\n  try:\n    url = f&quot;api.openf1.org/v1/stints{session_key}&quot;\n    response = requests.get(url)\n    response.raise_for_status()  # Raise an exception for bad status codes\n    data = response.json()\n    if isinstance(data, list) and data: #check if data is a list and not empty\n      return data\n    else:\n      print(&quot;Unexpected JSON format or empty data&quot;)\n      return None\n  except requests.exceptions.RequestException as e:\n    print(f&quot;An error occurred: {e}&quot;)\n    return None\n  except (KeyError, IndexError, TypeError):\n    print(&quot;Error processing JSON response&quot;)\n    return None\n \nsession_key = 9558\ndriver_number = 77\nlaps_data = get_laps_data(session_key, driver_number)\nstints_data = get_stints_data(session_key, driver_number)\n \ntyre_performance = {}\nif stints_data and laps_data:\n    for stint in stints_data:\n        compound = stint[&#039;compound&#039;] tyre_performance[compound,stint[&#039;session_key&#039;],stint[&#039;driver_number&#039;],stint[&#039;stint_number&#039;]] = []\n        for lap in range(stint[&#039;lap_start&#039;] - 1, stint[&#039;lap_end&#039;]):\n            try:\n                time = laps_data[lap][&#039;lap_duration&#039;]\n                if time is not None:  tyre_performance[compound,stint[&#039;session_key&#039;],stint[&#039;driver_number&#039;],stint[&#039;stint_number&#039;]].append(time)\n            except IndexError:\n                print(f&quot;Lap data not found for lap {lap + 1}&quot;)\n    print (tyre_performance)\nelse:\n    print(&quot;Could not retrieve tyre performance data.&quot;)\ndx = {k: v for k, v in tyre_performance.items() if &quot;MEDIUM&quot; in k[0]}\n \naverage_lap_times = {}\nfor key, lap_times in dx.items():\n    for i in range(len(lap_times)):\n        lap_number = i + 1  # Lap numbers start from 1\n        if lap_number not in average_lap_times:\n            average_lap_times[lap_number] = []\n        average_lap_times[lap_number].append(lap_times[i])\n \n \nfor lap_number, lap_times in average_lap_times.items():\n    average_time = sum(lap_times) / len(lap_times) if lap_times else 0  # Handle empty lists\n    print(average_time,&quot;,&quot;)"},"Posts/Kubernetes-Case-Study":{"title":"Kubernetes Case Study","links":["Notes/Digital/Containerisation/Container-Runtime","Notes/Digital/Containerisation/Docker","Notes/Digital/Containerisation/Container-Image","Notes/Digital/Containerisation/High-Availability","Notes/Digital/Containerisation/Pods","Notes/Digital/Containerisation/Container","Notes/Digital/Containerisation/Nodes","Notes/Digital/CICD","Notes/Digital/Containerisation/Image-Repository","Notes/Digital/Containerisation/Microservices","Notes/Digital/Containerisation/Control-Plane","Notes/Digital/Containerisation/Kubernetes","Notes/Digital/Containerisation/Proxy","Notes/Digital/Containerisation/kubelet","Notes/Digital/Containerisation/Kubernetes-services","Notes/Digital/Containerisation/kube-proxy","Notes/Digital/Application-Programming-Interface","Notes/Digital/Containerisation/kube-apiserver","Notes/Digital/Containerisation/Autoscaling","Notes/Digital/Containerisation/kube-controller-manager","Notes/Digital/Containerisation/kube-scheduler","Notes/Digital/Containerisation/etcd","Notes/Digital/Containerisation/Ephemeral","Notes/Digital/Containerisation/Stateful-Set","Notes/Digital/Containerisation/Persistent-Volume-Claim","Notes/Digital/Containerisation/kubeadm"],"tags":[],"content":"What is it\nKubernetes (k8s) is a system for container orchestration. Kubernetes is not a Container Runtime such as Docker. Kubernetes sits above and manages those containers.\nWhy is it useful\nDeploying a containerised platform brings many benefits to both application managers and consumers such as:\n\nFaster deployment - Containers can be spun up and down in seconds\nPortability - Containers can be deployed on any supported OS and always work the same\nStandardisation - Container installs are always based on a released Container Image\n\nWith Kubernetes deployed to manage these containers we get even more impressive benefits:\n\nHigh Availability- Run Pods of Containers across different Nodes to achieve fault tolerance\nSelf healing - Automatically get containers back into a running state after failure\nScaling - Automatically scale Pods and Nodes to take up demand changes on the fly\nCICD - Update Containers automatically with a push to the Image Repository. (Can specify what version to pull if not wanted).\nMicroservices - A microservices architecture allows all elements of a system to work and scale independently in isolation.\n\nHow does it work\nNow lets get to the meat of if, how does Kubernetes work, to set expectations I will be covering the basic architecture of a standard kubernetes setup not the in-depth backend workings.\nAt Kubernetes core there are two main components:\n\nControl Plane - The brain of kubernetes (Does the control)\nNodes - The body of kubernetes (Does the work)\n\nIn a cloud environment your cloud provider will almost always manage the control plane and let you decide what goes onto the Nodes (Aka Cloud manages the infrastructure and you choose what it does).\nBoth of these core components are typically ran across different servers with multiple instances of each running to allow for High Availability across both the Kubernetes management and the jobs running in the Nodes.\n\nNodes\nNodes are individual instances of computers running, these can have any supported OS and are typically VM’s such as EC2 instances in AWS just like you would use in a classical computing environment.\nNodes run the Containers through a Container Runtime most commonly Docker.\nNodes (sometimes called Worker Nodes) are made of four main components :\n\nContainer Runtime\nContainers\nNode Agent\nProxy (Not always required)\n\n\nContainer Runtime\nA container runtime (almost always Docker) is used to run the desired containers.\nContainers\nContainers are your packaged software that is running on the Node such as a database, API, Backend service, frontend server etc…\nThese containers are ran in logical groups called Pods that can be scaled as required.\nNode Agent\nA node agent sits on your node and collects data about your Pods and Containers spun up by kubernetes.\nIn kubernetes the default node agent is called kubelet\nProxy\nA Proxy is installed on nodes to allow Kubernetes services to be implemented. This allows for exposing network points to Pods that require it.\nIf this is not a requirement a proxy does not need to be installed.\nAs Pods are spun up and down as required with differing IP’s a proxy allows a specific Kubernetes services address to be used and the proxy can re-direct this traffic depending on what Pods are currently up.\nThe default kubernetes proxy is kube-proxy.\nControl Plane\nThe control plane is the brain of kubernetes, this is where kubernetes manages the clusters state. The control plane, in production, typically sit separate from the worker Nodes to ensure High Availability.\nIn a typical cloud deployment, the control plane is offered off the shelf with your cloud providers structure ready for your configuration.\nFour core parts make up the Control plane\n\nAPI\nController Manager\nScheduler\netcd\n\n\nAPI\nThe Application Programming Interface acts as the interface layer for the control plane as well as between control plane components. Any communication to/from the control plane occurs through this API.\nThe default controller manager is kube-apiserver.\nController Manager\nThe Controller Manager is the component of kubernetes that monitors the status of Nodes through the API, detecting node failures and spinning up new nodes as required.\nThe controller manager can be configured to manage based on many criteria using different controllers such as Autoscaling.\nThe default controller manager is kube-controller-manager.\nScheduler\nThe scheduler is the component of kubernetes that monitors load on the Pods and selects which node they should run on.\nThe default scheduler is kube-scheduler.\netcd\netcd is the core datastore for kubernetes, any information kubernetes needs to keep such as keys, configuration date, cluster states etc..\netcd stores and serves its data over kube-apiserver.\nA High Availability etcd can be run in two different modes:\n\nStacked - etcd runs on the Control Plane nodes\nExternal - etcd runs on separate nodes\n\nThere are lots of reasons to pick either but the core difference is stacked requires less control nodes but has less redundancy in case of failure.\nWhat if my application is stateful\nKubernetes pods scale up and scale down based on needs, this means any data associated to that pod that will also be scaled down, these are known as Ephemeral. Certain applications change how they respond based on what has happened previously and thus require some level of history to be stored, in Kubernetes this is completed through a Stateful Set and storing Pods data in an automatically linked Persistent Volume Claim.\nOther applications for example a OPC server may require some level of config to be stored to define how the OPC server should act. This can be completed through a Persistent Volume Claim storing the configuration which can then be accessed from any active Pods.\nOther info\nK8s is a great tool for production systems dealing with lots of complex systems all scaling in parallel. In the world where the complexity isn’t required and a more simple installation is required there are a few other options that follow the same principles as a full k8s install such as:\n\nMinikube - All runs on 1 VM so good for testing but loose most benefits of kubernetes\nk3s - Lightweight kubernetes, missing some kubernetes functionality but doesn’t use docker by default.\nMicrok8s - Production ready kubernetes, missing some kubernetes configuration options.\nThese are commonly deployed in bare-metal approaches where you are already restricted by hardware.\n\nGetting Started\nIf you’re on-board and want to start making a High Availability Kubernetes cluster, you can start to setup your installation using kubeadm to quickly get a production ready cluster running or go to your favourite cloud provider and spin up a cluster in minutes."},"Posts/Lego-F1-car":{"title":"Lego F1 car","links":["tags/3DPrinting","tags/F1"],"tags":["3DPrinting","F1"],"content":"3DPrintingF1\nFor those that know me personally, it won’t come as much of a shock that I’ve never been a huge supporter of any sport, although I enjoy taking part in most, I’ve not really taken the leap into watching or competitively supporting any sport or teams, even e-sports for games I play regularly never appealed. Apologies, I know this might sound like a ramble but I’m getting there.\nRecently, however, after being subjected to two rounds of “Re-Education” this year at Silverstone and Qatar respectively, F1 has turned into weekly a nail-biting regime somehow hoping that my support can influence the McLaren car (Or even better Bottas) to go just that millisecond faster.\nAlongside this new found addiction, like many people nowadays, especially those that found their way into the engineering world, I grew up loving Lego and all of the cool things you could build with it, many of which became sentimental to me. As you can imagine, once I found out Lego now create F1 cars I had to buy one, especially as it was my partners upcoming birthday who is also currently a McLaren fangirl. Although I’d love the huge model version, I’m not quite dedicated enough to splash £200 on a piece of plastic no matter how cool it looks and instead landed on the ~£22 model .\nOnce the model had been acquired, gifted and built it brought back the memories of the pain, where does it go now? Thankfully I’ve been practicing my 3D design and printing skills recently and wanted to put them to use. First of all I found a model online  that seemed to do the trick, create a nice angle to display the Lego piece on a desk with no risk of it driving off the end.\n\nAlthough that works fine I have a vision that this would look awesome hanging on the wall, making it look like we’re watching a top down view of the car racing along just like you see on TV. After a quick search I found nothing of the sorts, which is a great excuse to get into Fusion and start modelling, a simple hanging style measured exactly to line up with the Lego pieces so you will only be able to see the arms holding it up, with a single screw hole for easy mounting onto the wall or if you’re feeling brave (or reckless) with your model just a bit of glue. And this is what I landed on.\n\nAfter a few iterations to tweak dimensions so that it fits perfectly to the model and can be slid onto and off of the wheel rod without them needing to be removed I managed to print something I was happy with that worked well. My only concern was the thinest part of the arms but after a good few uses and weight testing I was happy with how it worked, any thicker and it would be to difficult to attach or not give a large enough section of circle to keep the car attached, both of which are worse cases than needing to re-print the model if it ever broke. In the photo below however I know it looks a little scraggly (Although you’ll not see it in operation so not too much of a concern) but trust me this is purely down to my horrendously calibrated Ender 3. Overall I’m fairly happy with the design, now I only need is a wall to hang it on…\n\n\nFor those interested in the design I have added it onto printables to download and print, I’d be really happy to see anyone using this model so please drop a make photo if you do!\nPrintables"},"Recordings/Recordings":{"title":"Recordings","links":[],"tags":[],"content":"I’ve found myself spending more and more time explaining and teaching topics to people in my industry especially engineers interested in the future of digitalisation or pharmaceutical equipment.\nFor anyone that knows me and my style of explanations, I love diagramming and visualising topics, I believe in doing it this way you start to understand the whole picture much more easily and can start to spot issues and ask smart questions.\nMy intent with this page is to put the effort into one recording explaining these important topics so that it can be used at any time by anyone."},"index":{"title":"Hamish's notes","links":["Notes/Notes","Recordings/Recordings","Posts/","Notes/Pharma/Secondary-Manufacturing"],"tags":[],"content":"Welcome to my website, I’ve made many generations of my website over the last few years and it’s always been sentimental to me, if not useful, to retain my old site for all, usually me, to go back and see. If you’re looking for my old website or are just interested in the history of the site you can find it Here\nIn my newest site I’m trying out a new approach, trying to make a “Second Brain” style website where I can share my knowledge to anyone willing to listen.\nMy intent with this approach is to hopefully make a website that allows you to find exactly what you need and only read what you need to but also make as much information available as possible.\nMy current site architecture is to focus on three distinct areas:\n\nSecond Brain Notes - An atomic note network\nRecordings - (Hopefully) A set of videos explaining commonly asked topics in depth\nPosts - A space for more in depth writing about individual projects, events, thoughts etc…\n\nFor now a central part of what I will be talking about is Pharmaceutical Secondary Manufacturing but I’m keen to expand the site into everything I deem important."}}